import sqlite3
from ProjectExploitUser import *
"""
The Database File
    this modules handles all the databse functions of the app

by:00nray


"""
class database():
    def __init__(self, dbPath = "../Users.db"):
        """The sqllite3 based database"""
        self.db=None
        self.path = dbPath
        self.connect()

        try:
            """Generates the tables unless they are allreaddy created"""
            print("[SQL] Creating Tables")
            cursor = self.getCursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS "users" (
                                    `id`	INTEGER PRIMARY KEY AUTOINCREMENT,
                                    `name`	TEXT,
                                    `phone`	INTEGER,
                                    `email`	TEXT,
                                    `timeWeb`	INTEGER,
                                    `timeUser`	INTEGER,
                                    `timeRoot`	TEXT,
                                    `points`	INTEGER
                                )''')
            self.db.commit()
            cursor.close()
        except self.db.Error as er:
            print("[SQL ERROR] "+er.message)

    def connect(self):
        try:
            self.db.close()
        except:
            pass
        self.db = sqlite3.connect(self.path)

    def getCursor(self):
        self.connect()
        return self.db.cursor()

    def addPlayerToDb(self,player):
        """adds a SPECIFIED PLAYERS NAME phone number and emil to database"""
        try:
            print("[SQL] inserting "+player.name)
            string='INSERT INTO users(name,phone,email,points,timeRoot,timeUser) VALUES("{}",{},"{}",{},"{}",{})'.format(player.name,player.phone,player.email,0,0,0)
            cursor= self.getCursor()
            cursor.execute(string)
            cursor.execute('select id from users where name = "{}"'.format(player.name))
            player.id = cursor.fetchall()
            self.db.commit()
            cursor.close()
        except self.db.Error as er:
            print("[SQL ERROR] "+er.message)

    def updatePlayerstr(self,table,value,user):
        """updates a value in the database usually this is points"""
        try:
            cursor = self.getCursor()
            stri='update users set {}="{}" where name = "{}"'.format(table,value,user)
            cursor.execute(stri)
            self.db.commit()
            cursor.close()
        except self.db.Error as er:
            print("[SQL ERROR] "+er.message)

    def updatePlayerint(self,table,value,user):
        """updates a value in the database usually this is points"""
        try:
            cursor = self.getCursor()
            stri='update users set {}={} where name = "{}"'.format(table,value,user)
            cursor.execute(stri)
            self.db.commit()
            cursor.close()
        except self.db.Error as er:
            print("[SQL ERROR] "+er.message)


    def GetTopPlayers(self):
        """gets the top n players in the databse based on time"""
        selectStatement = """SELECT name,timeRoot,points,timeUser from users WHERE points >= 50 ORDER BY timeUser ASC, points DESC LIMIT 5"""
        c=self.getCursor()
        c.execute(selectStatement)
        response =c.fetchall()
        c.close()
        return response


def main():
    """
    for testing
    """
    db=database(dbPath="Users.db")
    print(db.GetTopPlayers())

if __name__ == "__main__":main()








